buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

repositories{
    maven { url 'https://modmaven.dev/' } //Mekanism
    maven { url 'https://maven.blamejared.com/'} //IE
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }//Thermal Series
}

sourceSets {
	api
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
		resources {
			srcDir 'src/generated/resources'
		}
	}
	datagen {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.output
		runtimeClasspath += main.output
	}
}

configurations {
	apiImplementation.extendsFrom(implementation)
	apiRuntimeOnly.extendsFrom(runtimeOnly)
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //Lombok
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    
    //Mekanism
    //compileOnly "mekanism:Mekanism:${mekanism_version}:api"
    
    compile fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
    compile fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools
    
    //Thermal Series
    runtimeOnly fg.deobf("curse.maven:thermal-foundation-222880:3248150")
    runtimeOnly fg.deobf("curse.maven:thermal-expansion-69163:3247000")
    runtimeOnly fg.deobf("curse.maven:cofh-core-69162:3249453")
    
    //Immersive Engineering
    //compileOnly  fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${ie_version}:api")
	compile fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${ie_version}")
    //runtimeOnly  fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${ie_version}")
    
    //Bigger Reactors
    runtimeOnly fg.deobf("curse.maven:bigger-reactors-407780:3304030")
    runtimeOnly fg.deobf("curse.maven:phosphophyllite-412551:3276618")
    
    //Powah
    runtimeOnly fg.deobf("curse.maven:powah-352656:3232535")
    runtimeOnly fg.deobf("curse.maven:lollipop-347954:3232534")
    
    //Industrial Foregoing
    runtimeOnly fg.deobf("curse.maven:industrial-foregoing-266515:3261176")
    runtimeOnly fg.deobf("curse.maven:titanium-287342:3261072")
    
    //Patchouli
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    
    //Silent's Mechanisms
    runtimeOnly fg.deobf("curse.maven:silents-mechanisms-326258:3272909")
    runtimeOnly fg.deobf("curse.maven:silent-lib-242998:3235738")
    
    //Cyclic
    runtimeOnly fg.deobf("curse.maven:cyclic-239286:3279021")
    
    //Flux Networks
    compile fg.deobf("curse.maven:flux-networks-248020:3285556")
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

String build_number = System.getenv().BUILD_NUMBER
if (build_number == null) {
	build_number = '0'
}

String semver = version_major + "." + version_minor + "." + build_number
version = minecraft_version + "-" + semver
group= artifact_group
archivesBaseName = artifact_basename

minecraft {
    mappings channel: project.mappings, version: project.mappings_version

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                archivesBaseName {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                archivesBaseName {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', archivesBaseName, '--all', '--output', file('src/generated/resources/')

            mods {
                archivesBaseName {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

processResources {
    from (sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version, 'minecraft_version': project.minecraft_version, 'forge_version': project.forge_version
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	from sourceSets.main.output
	from sourceSets.api.output

    manifest {
        attributes([
            "Specification-Title": "Universal Power Monitor",
            "Specification-Vendor": "superckl",
            "Specification-Version": "${semver}",
            "Implementation-Title": "${project.name}",
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"superckl",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
    
    finalizedBy('reobfJar') 
}

task sourcesJar(type: Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

task apiJar(type: Jar) {
	archiveClassifier = 'api'
	from sourceSets.api.output
}

artifacts {
	archives apiJar
	archives sourcesJar
}